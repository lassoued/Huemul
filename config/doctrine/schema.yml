options:
  collate: utf8_unicode_ci
  charset: utf8
attributes:
  export: all


Profession:
  columns:
    id:                         { type: integer, primary: true, autoincrement: true}
    name:                       { type: string(100), notnull: true }
    description:                { type: clob, notnull: true }

Province:
  columns:
    id:                         { type: integer, primary: true, autoincrement: true}
    name:                       { type: string(100), notnull: true }

Location:
  columns:
    id:                         { type: integer, primary: true, autoincrement: true}
    name:                       { type: string(100), notnull: true }


Profile:
  actAs:
    - Timestampable
    - Geographical
    JCroppable:
      images: [ mugshot ]
  columns:
    sf_guard_user_id:           integer(4)
    first_name:                 { type: string(100), notnull: true }
    last_name:                  { type: string(100), notnull: true }
    profesion_id:               { type: integer }
    registration:               { type: string(40) }
    birth_date:                 { type: date }
    documment_type:             { type: enum, values: [ dni, le ], default: dni }
    documment:                  { type: string(12) }
    phone:                      { type: string(40) }
    movil:                      { type: string(40) }
    email:                      { type: string(60) }
    addres:                     { type: string(100) }
    #geo_localidad_id:    ~
    country:                    { type: string(50) }

  relations:
    User:
      class:            sfGuardUser
      foreignType:      one 
      onDelete:         CASCADE

    Profession:                 { foreignAlias: Users, local: profesion_id, foreign: id, class: Profession }



# Formuulario
Formu:
  actAs:
    - Timestampable
  tableName:                    formu
  columns:
    id:                         { type: integer, primary: true, autoincrement: true}
    user_id:                    integer(4)
    name:                       { type: string(100), notnull: true }
    description:                { type: clob, notnull: true }
  relations:
    Items:                      { class: Item, local: form_id, foreign: item_id, refClass: ItemFormu }
    Author:                     { local: user_id, foreign: id, class: sfGuardUser }

# Visado
Item:
  tableName:                    item
  actAs:
    - Timestampable
  columns:
    id:                         { type: integer, primary: true, autoincrement: true }
    group_id:                   integer(4)
    title:                      { type: string(100), notnull: true }
    description:                { type: clob, notnull: true }
  relations:
    Formus:                     { class: Formu, local: item_id, foreign: form_id, refClass: ItemFormu }
    Group:                      { foreignAlias: Items, local: group_id, foreign: id, class: sfGuardGroup }
    Revisions:                  { class: Revision, local: item_id, foreign: revision_id, refClass: RevisionItem }

# Formuulario <-> Visados
ItemFormu:
  columns:
    form_id:                    { type: integer, primary: true }
    item_id:                    { type: integer, primary: true }


CadastralData:
  tableName:                    cadastral_data
  actAs:
    - Timestampable
  columns:
    id:                         { type: integer, primary: true, autoincrement: true }
    circunscripcion:            { type: string(10), notnull: true }
    seccion:                    { type: string(10), notnull: true }
    tipo:                       { type: enum, values: [ manzana, quinta, chacra ], notnull: true }
    tipo_numero:                { type: string(10), notnull: true }
    partida_nro:                { type: string(10) }
    parcela:                    { type: string(10), notnull: true }
    uf:                         { type: string(10) }
    address:                    { type: string(255) }
    neighborhood:               { type: string(255) }
  relations:
    Procedure:                  { foreignAlias: CadastralData, local: id, foreign: cadastral_data_id, class: Procedure, foreignType: one }


Procedure:
  tableName:                    _procedure
  actAs:
    - Timestampable
  columns:
    id:                         { type: integer, primary: true, autoincrement: true }
    cadastral_data_id:          { type: integer }
    formu_id:                   { type: integer }
    #number:                     { type: string(50), notnull: true }
    dossier:                    { type: string(255) }
    is_finished:                { type: boolean, default: false }
    revisions_count:            { type: integer }
    #owner:                      { type: string(255) }
    #address:                    { type: string(255) }
    #neighborhood:               { type: string(255) }
    
  relations:
    Formu:                      { foreignAlias: Procedures, local: formu_id, foreign: id, class: Formu }
    CadastralData:              { foreignAlias: Procedures, local: cadastral_data_id, foreign: id, class: CadastralData, foreignType: one }
    Users:                      { class: sfGuardUser, local: procedure_id, foreign: user_id, refClass: UserProcedure, foreignAlias: Procedures }

UserProcedure:
  columns:
    user_id:                    { type: integer(4), primary: true }
    procedure_id:               { type: integer, primary: true }
    type:                       { type: enum, values: [ propietario, calculo, director de obra, ejecutor, proyecto ], primary: true }

  relations:
    sfGuardUser:                { local: user_id, onDelete: CASCADE }
    Procedure:                  { local: procedure_id, onDelete: CASCADE }


Revision:
  tableName:                    revision
  actAs:
    - Timestampable
  columns:
    id:                         { type: integer, primary: true, autoincrement: true }
    number:                     { type: integer }
    parent_id:                  { type: integer }
    procedure_id:               { type: integer }
    revision_state_id:          { type: integer(2) }
    creator_id:                 { type: integer(4) }
    block:                      { type: boolean, default: false }
    description:                { type: clob }
    file:                       { type: string(255) }

  relations:
    Creator:                    { local: creator_id, class: sfGuardUser }
    Procedure:                  { local: procedure_id, foreignAlias: Revisions, onDelete: CASCADE }
    State:                      { local: revision_state_id, class: RevisionState }
    Items:                      { class: Item, local: revision_id, foreign: item_id, refClass: RevisionItem }


RevisionState:
  tableName:                    revision_state
  actAs:
    - Timestampable
  columns:
    id:                         { type: integer(2), primary: true, autoincrement: true }
    title:                      { type: string(50), notnull: true }
    description:                { type: string(255) }

# revision <-> item
RevisionItem:
  columns:
    id:                         { type: integer, primary: true, autoincrement: true }
    item_id:                    { type: integer }
    revision_id:                { type: integer }
    user_id:                    integer(4)
    state:                      { type: enum, values: [ ok, error, nc ], default: nc }
  relations:
    Item:                       { local: item_id, onDelete: CASCADE }
    Revision:                   { local: revision_id, onDelete: CASCADE }
    UserController:             { local: user_id, foreign: id, class: sfGuardUser }
    
  indexes:
    myIndexs:
      fields:                   [ item_id, revision_id ]
      type:                     unique

ComunicationItem:
  actAs:
    - Timestampable
  columns:
    id:                         { type: integer, primary: true, autoincrement: true }
    revision_item_id:           { type: integer }
    author_id:                  { type: integer(4) }
    subject:                    { type: string(255), notnull: true }
    message:                    { type: clob, notnull: true }
  relations:
    Author:                     { local: author_id, class: sfGuardUser, onDelete: CASCADE }
    RevisionItem:               { local: revision_item_id, foreignAlias: RevisionItem, onDelete: CASCADE }

ComunicationRevision:
  actAs:
    - Timestampable
  columns:
    id:                         { type: integer, primary: true, autoincrement: true }
    revision_id:                { type: integer }
    author_id:                  { type: integer(4) }
    subject:                    { type: string(255), notnull: true }
    message:                    { type: clob, notnull: true }
  relations:
    Author:                     { local: author_id, class: sfGuardUser, onDelete: CASCADE }
    Revision:                   { local: revision_id, foreignAlias: Revision, onDelete: CASCADE }