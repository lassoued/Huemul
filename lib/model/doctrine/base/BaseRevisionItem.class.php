<?php

/**
 * BaseRevisionItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $item_id
 * @property integer $revision_id
 * @property integer $user_id
 * @property enum $state
 * @property Item $Item
 * @property Revision $Revision
 * @property sfGuardUser $UserController
 * @property Doctrine_Collection $RevisionItem
 * 
 * @method integer             getId()             Returns the current record's "id" value
 * @method integer             getItemId()         Returns the current record's "item_id" value
 * @method integer             getRevisionId()     Returns the current record's "revision_id" value
 * @method integer             getUserId()         Returns the current record's "user_id" value
 * @method enum                getState()          Returns the current record's "state" value
 * @method Item                getItem()           Returns the current record's "Item" value
 * @method Revision            getRevision()       Returns the current record's "Revision" value
 * @method sfGuardUser         getUserController() Returns the current record's "UserController" value
 * @method Doctrine_Collection getRevisionItem()   Returns the current record's "RevisionItem" collection
 * @method RevisionItem        setId()             Sets the current record's "id" value
 * @method RevisionItem        setItemId()         Sets the current record's "item_id" value
 * @method RevisionItem        setRevisionId()     Sets the current record's "revision_id" value
 * @method RevisionItem        setUserId()         Sets the current record's "user_id" value
 * @method RevisionItem        setState()          Sets the current record's "state" value
 * @method RevisionItem        setItem()           Sets the current record's "Item" value
 * @method RevisionItem        setRevision()       Sets the current record's "Revision" value
 * @method RevisionItem        setUserController() Sets the current record's "UserController" value
 * @method RevisionItem        setRevisionItem()   Sets the current record's "RevisionItem" collection
 * 
 * @package    Huemul
 * @subpackage model
 * @author     Damian Suarez
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseRevisionItem extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('revision_item');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('item_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('revision_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('state', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'ok',
              1 => 'error',
              2 => 'nc',
              3 => 'sc',
             ),
             'default' => 'sc',
             ));


        $this->index('myIndexs', array(
             'fields' => 
             array(
              0 => 'item_id',
              1 => 'revision_id',
             ),
             'type' => 'unique',
             ));

        $this->setAttribute(Doctrine_Core::ATTR_EXPORT, Doctrine_Core::EXPORT_ALL);

        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Item', array(
             'local' => 'item_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Revision', array(
             'local' => 'revision_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUser as UserController', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasMany('ComunicationItem as RevisionItem', array(
             'local' => 'id',
             'foreign' => 'revision_item_id'));
    }
}